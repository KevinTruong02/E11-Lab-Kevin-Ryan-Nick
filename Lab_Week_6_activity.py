# -*- coding: utf-8 -*-
"""Lab-Activity-Week-6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5IoAQKAONb47BTsChbx8NOs5oKtQiD5

# Lab Activity Week 6

**Homework** Anything you do not complete in lab is your homework. Please provide a link to your github repository as your homework submission.

### Step 1 - Review: Comparing Indoor vs Outdoor data
- Cut out any data that was part of your outdoor data set that was not taken outdoors or take a new outdoor data set that runs for an extra 30s to give you time to get outside and then cut out that 30s interval
  - Recall we learned methods for slicing dataframes in week 2
- Now produce histogram plots that compare indoors vs outdoors for each of your data types - don't forget labels
- Compare the mean and standard deviation values for each set of indoor data versus outdoor data, are they in agreement?
  - NOTE: The variance in your data is not the uncertainty on the mean (central limit theorem)
  - what is your mean uncertainty?
  - How many inside mean standard deviations (1 sigma uncertainty) are your inside and outside measurements separated by?
- If your distributions were not well described by a Gaussian, do you think you took enough data for the central limit theorem to apply?
"""

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/insideslice.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt

#inside_data
inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/insideslice.csv")
inside_time_series = inside_df.columns[0]
inside_df[inside_time_series] = pd.to_datetime(inside_df[inside_time_series])

plt.figure(figsize=(10, 6))
plt.plot(inside_df[inside_time_series], inside_df.iloc[:, 1])
plt.title('Inside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
outside_time_series = outside_df.columns[0]
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

plt.figure(figsize=(10, 6))
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1])
plt.title('Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load inside_data
inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/insideslice.csv")
inside_time_series = inside_df.columns[0]  # Assuming the first column is time series data
inside_df[inside_time_series] = pd.to_datetime(inside_df[inside_time_series])

# Load outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
outside_time_series = outside_df.columns[0]  # Assuming the first column is time series data
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

# Plot both inside and outside data
plt.figure(figsize=(10, 6))

plt.plot(inside_df[inside_time_series], inside_df.iloc[:, 1], label='Inside Data')
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1], label='Outside Data')

plt.title('Inside and Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/insideslice.csv")


outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")


plt.figure(figsize=(10, 6))


plt.hist(inside_df.iloc[:, 1], bins=20, alpha=0.5, label='Inside Data')
plt.hist(outside_df.iloc[:, 1], bins=20, alpha=0.5, label='Outside Data')

plt.title('Histograms of Inside and Outside Data')
plt.xlabel('Data')
plt.ylabel('Frequency')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()



import numpy as np


inside_mean = inside_df.iloc[:, 1].mean()
inside_std = inside_df.iloc[:, 1].std()
inside_N = len(inside_df)
inside_sigma_mean = inside_std / np.sqrt(inside_N)


outside_mean = outside_df.iloc[:, 1].mean()
outside_std = outside_df.iloc[:, 1].std()
outside_N = len(outside_df)
outside_sigma_mean = outside_std / np.sqrt(outside_N)

separation = np.abs(inside_mean - outside_mean) / np.sqrt(inside_sigma_mean**2 + outside_sigma_mean**2)
is_statistically_different = separation > 3

print("Means:")
print("Inside Data Mean:", inside_mean)
print("Outside Data Mean:", outside_mean)
print("\nUncertainty on the Mean:")
print("Inside Data Sigma Mean:", inside_sigma_mean)
print("Outside Data Sigma Mean:", outside_sigma_mean)
print("\nSeparation (in terms of standard deviations):", separation)
print("Are the means statistically different?", is_statistically_different)

"""The data for the outside and inside consist of the same time, being
  1.708130e+09 for both. The temperature and presure for both datas are similar, being 23 C and 1008 hPa, being different to the slightest tenth place. Besides that, the rest of the other datas are different where it is shown that inside data process greater gas, altitude, and humidity. The mean undertainity is 0.0128 for inside data and 0.1060 for outside data. The seperation in terms of th4e standard deviaiton is 43.949.

### Step 2: Comparing sensors
- Get inside/outside data from another group in your lab and compare your inside data with their inside data, including all of elements from Step 1. - Do the same statistical comparison of your outside data with the outside data from the other group.
- How do the sensors compare? What do you think this indicates about the accuracy and precision of your sensors?
"""

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_data_inside.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_quality_outside.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt

#inside_data
inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_data_inside.csv")
inside_time_series = inside_df.columns[0]
inside_df[inside_time_series] = pd.to_datetime(inside_df[inside_time_series])

plt.figure(figsize=(10, 6))
plt.plot(inside_df[inside_time_series], inside_df.iloc[:, 1])
plt.title('Inside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_quality_outside.csv")
outside_time_series = outside_df.columns[0]
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

plt.figure(figsize=(10, 6))
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1])
plt.title('Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load inside_data
inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_data_inside.csv")
inside_time_series = inside_df.columns[0]  # Assuming the first column is time series data
inside_df[inside_time_series] = pd.to_datetime(inside_df[inside_time_series])

# Load outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_quality_outside.csv")
outside_time_series = outside_df.columns[0]  # Assuming the first column is time series data
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

# Plot both inside and outside data
plt.figure(figsize=(10, 6))

plt.plot(inside_df[inside_time_series], inside_df.iloc[:, 1], label='Inside Data')
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1], label='Outside Data')

plt.title('Inside and Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_data_inside.csv")


outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/weather_quality_outside.csv")


plt.figure(figsize=(10, 6))


plt.hist(inside_df.iloc[:, 1], bins=20, alpha=0.5, label='Inside Data')
plt.hist(outside_df.iloc[:, 1], bins=20, alpha=0.5, label='Outside Data')

plt.title('Histograms of Inside and Outside Data')
plt.xlabel('Data')
plt.ylabel('Frequency')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()



import numpy as np


inside_mean = inside_df.iloc[:, 1].mean()
inside_std = inside_df.iloc[:, 1].std()
inside_N = len(inside_df)
inside_sigma_mean = inside_std / np.sqrt(inside_N)


outside_mean = outside_df.iloc[:, 1].mean()
outside_std = outside_df.iloc[:, 1].std()
outside_N = len(outside_df)
outside_sigma_mean = outside_std / np.sqrt(outside_N)

separation = np.abs(inside_mean - outside_mean) / np.sqrt(inside_sigma_mean**2 + outside_sigma_mean**2)
is_statistically_different = separation > 3

print("Means:")
print("Inside Data Mean:", inside_mean)
print("Outside Data Mean:", outside_mean)
print("\nUncertainty on the Mean:")
print("Inside Data Sigma Mean:", inside_sigma_mean)
print("Outside Data Sigma Mean:", outside_sigma_mean)
print("\nSeparation (in terms of standard deviations):", separation)
print("Are the means statistically different?", is_statistically_different)

"""The sensors from the other groups shows more signs of gaussian shaped data with multiple "hills". Furthermore, the histograms from the other groups are shown to more consitent between the relationship between the outside and inside data while our data shows a historgram of the outside data starting rather late at (17.5,175) and going all the way to x = 23.5 before the inside data occur at x = 23.9. The mean datas, uncertainty, and seperation are drastically different where the mean in our data is much greater, being Inside Data Mean: 23.638 and
Outside Data Mean: 18.942 while the other groups is much lesser, being 0.973 and 2.477. The seperation is also greater in our data, being 43.94 compared to 19.49. The uncertainty for both means are low and the means are statiscally different which indicate the consistentcy of the measurement from both sensor, being accruate and precise. The difference in the values represents the environmental influence upon the sensors since indoor and outdoor temeprature can be diverged due to the different location with different nautral conditions, ventillation, and source of emissions.

### Step 3: More locations
- Consider other areas you could take your sensors where you might find a larger change in the data: for example, is there somewhere near lab where the air quality might be significantly worse?
- Set up your system to be able to run in a way that would allow you to get to that location and take ~5 minutes of data.
  - This might require adding additional input arguments, like a delayed start time, or changing to running indefinitely but making sure that your data is being collected and saved even if your script does not run gracefully.
- Compare this new set of data with your other outdoor data, including the same set of graphs and statistical comparisons made for earlier steps.
"""

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/EtchBasementSlice.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
df.head ()
print(df.columns)
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt

#Etchevery_data
Etchevery_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/EtchBasementSlice.csv")
Etchevery_time_series = Etchevery_df.columns[0]
Etchevery_df[Etchevery_time_series] = pd.to_datetime(Etchevery_df[Etchevery_time_series])

plt.figure(figsize=(10, 6))
plt.plot(Etchevery_df[Etchevery_time_series], Etchevery_df.iloc[:, 1])
plt.title('Etchevery Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
outside_time_series = outside_df.columns[0]
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

plt.figure(figsize=(10, 6))
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1])
plt.title('Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load Etchevery_data
Etchevery_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/EtchBasementSlice.csv")
Etchevery_time_series = inside_df.columns[0]  # Assuming the first column is time series data
Etchevery_df[Etchevery_time_series] = pd.to_datetime(Etchevery_df[Etchevery_time_series])

# Load outside_data
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
outside_time_series = outside_df.columns[0]  # Assuming the first column is time series data
outside_df[outside_time_series] = pd.to_datetime(outside_df[outside_time_series])

# Plot both Etchevery and outside data
plt.figure(figsize=(10, 6))

plt.plot(Etchevery_df[Etchevery_time_series], Etchevery_df.iloc[:, 1], label='Etchevery Data')
plt.plot(outside_df[outside_time_series], outside_df.iloc[:, 1], label='Outside Data')

plt.title('Etchevery and Outside Data Time Series')
plt.xlabel('Time')
plt.ylabel('Data')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


Etchevery_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/EtchBasementSlice.csv")


outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")


plt.figure(figsize=(10, 6))


plt.hist(Etchevery_df.iloc[:, 1], bins=20, alpha=0.5, label='Etchevery Data')
plt.hist(outside_df.iloc[:, 1], bins=20, alpha=0.5, label='Outside Data')

plt.title('Histograms of Etchevery and Outside Data')
plt.xlabel('Data')
plt.ylabel('Frequency')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()



import numpy as np


Etchevery_mean = Etchevery_df.iloc[:, 1].mean()
Etchevery_std = Etchevery_df.iloc[:, 1].std()
Etchevery_N = len(Etchevery_df)
Etchevery_sigma_mean = Etchevery_std / np.sqrt(Etchevery_N)


outside_mean = outside_df.iloc[:, 1].mean()
outside_std = outside_df.iloc[:, 1].std()
outside_N = len(outside_df)
outside_sigma_mean = outside_std / np.sqrt(outside_N)

separation = np.abs(inside_mean - outside_mean) / np.sqrt(inside_sigma_mean**2 + outside_sigma_mean**2)
is_statistically_different = separation > 3

print("Means:")
print("Inside Data Mean:", inside_mean)
print("Outside Data Mean:", outside_mean)
print("\nUncertainty on the Mean:")
print("Inside Data Sigma Mean:", inside_sigma_mean)
print("Outside Data Sigma Mean:", outside_sigma_mean)
print("\nSeparation (in terms of standard deviations):", separation)
print("Are the means statistically different?", is_statistically_different)

"""The air quality is worst the further underground one travel to. Comparing with the Etchevary data with the previous data, the graph for the Etchevary data shows more of a Guassian shape compare to the inside data. However, the seperation in terms of the standard deviation increased to 155.9 but the uncertainty is still low which indicates the precision and accuracy of the data. The histogram with the Etchevary data is more prominent, occuring at 22.7 compared to the inside data.

### Step 4: Correlations in data
- Plot temperature vs humidity
  - NOTE: These were taken by the same sensor at the same time, so each measurement matches up in time, meaning plotting one versus the other works.
  - What is the hidden variable that is important when making plots like this?
- What does this plot show? Are temperature and humidity correlated? How would you quantify this?
  - HINT: there are linear correlation comparisons you can make mathematically such as the Pearson's correlation or similar (linear $R^2$), is the correlation you are seeing linear? Can you implement these in code?
- Plot temperature vs another property measured by that sensor, are they correlated? Is the correlation qualitatively similar to what you see from temperature vs humidity?
  - try this for all data types (temp. vs pressure, temp. vs voc, etc.)
  
- Plot temperature vs PM2.5 concentration and discuss as with the previous comparisons.
  - This will require coming up with a way to ensure that the times match between sensors, what about the way you are collecting data ensures that this is true?
"""

Etchevery_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/EtchBasementSlice.csv")
outside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/outsideslice.csv")
inside_df = pd.read_csv("https://raw.githubusercontent.com/KevinTruong02/E11-Lab-Kevin-Ryan-Nick/main/insideslice.csv")

Etchevery_df[Etchevery_df.columns[0]] = pd.to_datetime(Etchevery_df[Etchevery_df.columns[0]])
outside_df[outside_df.columns[0]] = pd.to_datetime(outside_df[outside_df.columns[0]])
inside_df[inside_df.columns[0]] = pd.to_datetime(inside_df[inside_df.columns[0]])

temperature_column_name = Etchevery_df.columns[1]
humidity_column_name = Etchevery_df.columns[2]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[humidity_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[humidity_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[humidity_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs Humidity Comparison')
plt.xlabel('Temperature')
plt.ylabel('Humidity')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, humidity_column_name]].corr(method='pearson')
pearson_corr_temperature_humidity = pearson_corr.loc[temperature_column_name, humidity_column_name]
print("Pearson Correlation Coefficient between temperature and humidity for Etchevery data:", pearson_corr_temperature_humidity)


pearson_corr = outside_df[[temperature_column_name, humidity_column_name]].corr(method='pearson')
pearson_corr_temperature_humidity = pearson_corr.loc[temperature_column_name, humidity_column_name]
print("Pearson Correlation Coefficient between temperature and humidity for outside data:", pearson_corr_temperature_humidity)


pearson_corr = inside_df[[temperature_column_name, humidity_column_name]].corr(method='pearson')
pearson_corr_temperature_humidity = pearson_corr.loc[temperature_column_name, humidity_column_name]
print("Pearson Correlation Coefficient between temperature and humidity for inside data:", pearson_corr_temperature_humidity)

"""

*   The hidden variable that is important when making a plot like this is the time
*   To explain the plot, it shows a inside, Etchevary, and outside data of the humidity vs the temperature where the outside data is shown to have a loop appearence pattern which shows a non-linear relationship between humidity and temeprature. Etchevary shows trend where humidity decrease as temperature increase, showing inversely proportional relationship. Inside data shows a nonlinear pattern which doesn't correalte with the previous two data. To determine the correlation between the temperature and humidity and if the correlation is linear, the perason correlation coefficient can be used to measure the linear correlation between temperature and humidity. The coefficient is from -1 to 1 wher 1= linear correclation, 0= no linear correaction, -1= negative linear correlation. When coding, it's shown that Etchevery has 0.13 coefficient which lean towards minimal linear correlation. Inside data has    0.905 coefficient which shows definite linear correlation and outside data shows -0.905 which shows negative linear correlation.


"""

temperature_column_name = Etchevery_df.columns[1]
pressure_column_name = Etchevery_df.columns[2]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[pressure_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[pressure_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[pressure_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs Pressure Comparison')
plt.xlabel('Temperature')
plt.ylabel('Pressure')
plt.legend()
plt.grid(True)
plt.show()


print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)


pearson_corr = Etchevery_df[[temperature_column_name, pressure_column_name]].corr(method='pearson')
pearson_corr_temperature_pressure = pearson_corr.loc[temperature_column_name, pressure_column_name]
print("Pearson Correlation Coefficient between temperature and pressure for Etchevery data:", pearson_corr_temperature_pressure)

pearson_corr = outside_df[[temperature_column_name, pressure_column_name]].corr(method='pearson')
pearson_corr_temperature_pressure = pearson_corr.loc[temperature_column_name, pressure_column_name]
print("Pearson Correlation Coefficient between temperature and pressure for outside data:", pearson_corr_temperature_pressure)

pearson_corr = inside_df[[temperature_column_name, pressure_column_name]].corr(method='pearson')
pearson_corr_temperature_pressure = pearson_corr.loc[temperature_column_name, pressure_column_name]
print("Pearson Correlation Coefficient between temperature and pressure for inside data:", pearson_corr_temperature_pressure)

"""When comparing Temperature vs Pressure and Temperature vs Humidity, the graphs are shown to be exactly the same where the pattern of Etchevary, inside,and outside data are exactly the same. In fact, the perason correlation coefficent between Temperature vs Pressure and Temperature vs Humidity are exactly the same. The correlation pattern is exactly the same as temperature vs humidity where Etchevary data is shown to be close to minimal linear correlation, outside data is negatively correlated, and inside data is almost perfectly correlated."""

temperature_column_name = Etchevery_df.columns[1]
voc_column_name = Etchevery_df.columns[3]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[voc_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[voc_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[voc_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs VOC Comparison')
plt.xlabel('Temperature')
plt.ylabel('VOC')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, voc_column_name]].corr(method='pearson')
pearson_corr_temperature_voc = pearson_corr.loc[temperature_column_name, voc_column_name]
print("Pearson Correlation Coefficient between temperature and VOC for Etchevery data:", pearson_corr_temperature_voc)

pearson_corr = outside_df[[temperature_column_name, voc_column_name]].corr(method='pearson')
pearson_corr_temperature_voc = pearson_corr.loc[temperature_column_name, voc_column_name]
print("Pearson Correlation Coefficient between temperature and VOC for outside data:", pearson_corr_temperature_voc)

pearson_corr = inside_df[[temperature_column_name, voc_column_name]].corr(method='pearson')
pearson_corr_temperature_voc = pearson_corr.loc[temperature_column_name, voc_column_name]
print("Pearson Correlation Coefficient between temperature and VOC for inside data:", pearson_corr_temperature_voc)

"""When comparing Temperature vs VOC and Temperature vs Humidity, the graphs are shown to be qualitatively differently. This is because the pattern for inside and Etchevary data both shown to shift down while the previous data is shown to go up. Outside data is similar since both Temperature vs VOC and Temperature vs Humidity data shows Outside data going down but in Temperature vs Humidity data, Outside is shown to steep down even lower while Temperature vs VOC is shown to go up abit before beign constant. The coefficient between the two graphs are different since in Temperature vs VOC, the coefficents are all negative which signifies all of the data are negatively correlated."""

temperature_column_name = Etchevery_df.columns[1]
gas_column_name = Etchevery_df.columns[3]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[gas_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[gas_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[gas_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs Gas Comparison')
plt.xlabel('Temperature')
plt.ylabel('Gas')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, gas_column_name]].corr(method='pearson')
pearson_corr_temperature_gas = pearson_corr.loc[temperature_column_name, gas_column_name]
print("Pearson Correlation Coefficient between temperature and gas for Etchevery data:", pearson_corr_temperature_gas)

pearson_corr = outside_df[[temperature_column_name, gas_column_name]].corr(method='pearson')
pearson_corr_temperature_gas = pearson_corr.loc[temperature_column_name, gas_column_name]
print("Pearson Correlation Coefficient between temperature and gas for outside data:", pearson_corr_temperature_gas)

pearson_corr = inside_df[[temperature_column_name, gas_column_name]].corr(method='pearson')
pearson_corr_temperature_gas = pearson_corr.loc[temperature_column_name, gas_column_name]
print("Pearson Correlation Coefficient between temperature and gas for inside data:", pearson_corr_temperature_gas)

"""The Temperature vs Gas and Temperature vs VOC are exactly the same. When comparing Temperature vs gas and Temperature vs Humidity, Outside data is similar since to Temperature vs Humidity data as it shows Outside data going down but in Temperature vs Humidity data, Outside is shown to steep down even lower while Temperature vs Gas is shown to go up abit before being constant. The pattern for inside and Etchevary data both shown to shift down while the previous data is shown to go up. The coefficient between the two graphs are different since in Temperature vs Gas, the coefficents are all negative which signifies all of the data are negatively correlated."""

temperature_column_name = Etchevery_df.columns[1]
altitude_column_name = Etchevery_df.columns[4]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[altitude_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[altitude_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[altitude_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs Altitude Comparison')
plt.xlabel('Temperature')
plt.ylabel('Altitude')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, altitude_column_name]].corr(method='pearson')
pearson_corr_temperature_altitude = pearson_corr.loc[temperature_column_name, altitude_column_name]
print("Pearson Correlation Coefficient between temperature and altitude for Etchevery data:", pearson_corr_temperature_altitude)

pearson_corr = outside_df[[temperature_column_name, altitude_column_name]].corr(method='pearson')
pearson_corr_temperature_altitude = pearson_corr.loc[temperature_column_name, altitude_column_name]
print("Pearson Correlation Coefficient between temperature and altitude for outside data:", pearson_corr_temperature_altitude)

pearson_corr = inside_df[[temperature_column_name, altitude_column_name]].corr(method='pearson')
pearson_corr_temperature_altitude = pearson_corr.loc[temperature_column_name, altitude_column_name]
print("Pearson Correlation Coefficient between temperature and altitude for inside data:", pearson_corr_temperature_altitude)

"""In Temperature vs Altitude data, the Etchevary, inside, and outside data are shown to be qualitatively different compared to the Temeprature vs Humidity graph since the Outside is shown to be in a pattern of increasing increase instead of decreasing like in Temperature vs Humidity. The Etchevary somewhat shows a linear correlation where the pattern is shown to decrease in a more striaght like manner compared to the inconsistent pattern in Temeprature vs Humidity graph. The inside data is shown to to correlate linearly and increasing in  Temperature vs Altitude. The coefficent for Etchevary is shown to further decrease which represents the opposite relationship of the grpah going up instead of going down linearly. Outside and inside data both hsve correaltion coefficent close to linear isnce both the value are almost close to 1."""

Etchevery_df[Etchevery_df.columns[0]] = pd.to_datetime(Etchevery_df[Etchevery_df.columns[0]])
outside_df[outside_df.columns[0]] = pd.to_datetime(outside_df[outside_df.columns[0]])
inside_df[inside_df.columns[0]] = pd.to_datetime(inside_df[inside_df.columns[0]])

temperature_column_name = Etchevery_df.columns[1]
time_column_name = Etchevery_df.columns[0]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[time_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[time_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[time_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs Time Comparison')
plt.xlabel('Temperature')
plt.ylabel('Time')
plt.legend()
plt.grid(True)
plt.show()

"""Temperature vs Time and Temperature vs Humidity almost have no similarity between each other since the time graph shows no short of pattern, only showing all the datas as being constant and linear. Etchevary is constant at the highest time. The coefficient couldn't be found since correalting numerical variable such as temperature with date time variable such as time wasn't possible for Pearson correlation due to time already being an invisible variable on the previous data."""

temperature_column_name = Etchevery_df.columns[1]
pm10_column_name = Etchevery_df.columns[6]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[pm10_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[pm10_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[pm10_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs PM10 Comparison')
plt.xlabel('Temperature')
plt.ylabel('PM10')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, pm10_column_name]].corr(method='pearson')
pearson_corr_temperature_pm10 = pearson_corr.loc[temperature_column_name, pm10_column_name]
print("Pearson Correlation Coefficient between temperature and PM10 for Etchevery data:", pearson_corr_temperature_pm10)

pearson_corr = outside_df[[temperature_column_name, pm10_column_name]].corr(method='pearson')
pearson_corr_temperature_pm10 = pearson_corr.loc[temperature_column_name, pm10_column_name]
print("Pearson Correlation Coefficient between temperature and PM10 for outside data:", pearson_corr_temperature_pm10)

pearson_corr = inside_df[[temperature_column_name, pm10_column_name]].corr(method='pearson')
pearson_corr_temperature_pm10 = pearson_corr.loc[temperature_column_name, pm10_column_name]
print("Pearson Correlation Coefficient between temperature and PM10 for inside data:", pearson_corr_temperature_pm10)

"""When observing Temperature vs PM10 amd Temeperature vs Humidity graph, there shows no similarities netween the two since the all the data in Temerature vs PM10 are shown to be scattered bits of small horizontal lines with outside data being in the top followed by inside data and then Etchevary data. The coefficent information of all the datas to be negative in Temperature vs PM10 graphg where the inside and Etchevary data being close to 0, meaning close to no linear correlation while outside data coefficient is -0.83 which is close to megative linear coefficent."""

PMtemperature_column_name = Etchevery_df.columns[1]
pm1_column_name = Etchevery_df.columns[6]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[pm1_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[pm1_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[pm1_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs PM1 Comparison')
plt.xlabel('Temperature')
plt.ylabel('PM1')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, pm1_column_name]].corr(method='pearson')
pearson_corr_temperature_pm1 = pearson_corr.loc[temperature_column_name, pm1_column_name]
print("Pearson Correlation Coefficient between temperature and PM1 for Etchevery data:", pearson_corr_temperature_pm1)

pearson_corr = outside_df[[temperature_column_name, pm1_column_name]].corr(method='pearson')
pearson_corr_temperature_pm1 = pearson_corr.loc[temperature_column_name, pm1_column_name]
print("Pearson Correlation Coefficient between temperature and PM1 for outside data:", pearson_corr_temperature_pm1)

pearson_corr = inside_df[[temperature_column_name, pm1_column_name]].corr(method='pearson')
pearson_corr_temperature_pm1 = pearson_corr.loc[temperature_column_name, pm1_column_name]
print("Pearson Correlation Coefficient between temperature and PM1 for inside data:", pearson_corr_temperature_pm1)

"""Temperature vs PM1 and Temperature vs PM 10 graph are exactly the same in terms of the pattern and also the pearson correlation coefficient is exactly the same as Temperature vsd PM1"""

temperature_column_name = Etchevery_df.columns[1]
pm25_column_name = Etchevery_df.columns[5]

plt.figure(figsize=(10, 6))
plt.scatter(Etchevery_df[temperature_column_name], Etchevery_df[pm25_column_name], alpha=0.5, label='Etchevery Data')
plt.scatter(outside_df[temperature_column_name], outside_df[pm25_column_name], alpha=0.5, label='Outside Data')
plt.scatter(inside_df[temperature_column_name], inside_df[pm25_column_name], alpha=0.5, label='Inside Data')

plt.title('Temperature vs PM2.5 Comparison')
plt.xlabel('Temperature')
plt.ylabel('PM2.5')
plt.legend()
plt.grid(True)
plt.show()

print("Etchevery_df columns:", Etchevery_df.columns)
print("outside_df columns:", outside_df.columns)
print("inside_df columns:", inside_df.columns)

pearson_corr = Etchevery_df[[temperature_column_name, pm25_column_name]].corr(method='pearson')
pearson_corr_temperature_pm25 = pearson_corr.loc[temperature_column_name, pm25_column_name]
print("Pearson Correlation Coefficient between temperature and PM2.5 for Etchevery data:", pearson_corr_temperature_pm25)

pearson_corr = outside_df[[temperature_column_name, pm25_column_name]].corr(method='pearson')
pearson_corr_temperature_pm25 = pearson_corr.loc[temperature_column_name, pm25_column_name]
print("Pearson Correlation Coefficient between temperature and PM2.5 for outside data:", pearson_corr_temperature_pm25)

pearson_corr = inside_df[[temperature_column_name, pm25_column_name]].corr(method='pearson')
pearson_corr_temperature_pm25 = pearson_corr.loc[temperature_column_name, pm25_column_name]
print("Pearson Correlation Coefficient between temperature and PM2.5 for inside data:", pearson_corr_temperature_pm25)

"""Temperature vs PM2.5 and Tempeature vs Humidity are qualitatively very similar since the pattern for outside data shows a linear decrease. However, the inside data can be different since Temeprature vs
 PM2.5 characterized inside data as going down while the Etchavary data is consitently shown to go up. The coefficient for Etchevary is shown to be close to 1 which means that linearly correlated. Both outside and insde data are shown to be negatively correlated, being close to -1. To ensure that the time matches with between the sensor, it is best to synchronize the data frame based on the time where the plot will aligh with the data which should allow correlation coefficient to be close to the data frame
"""
